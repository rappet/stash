# This file is managed by Ansible. Changes will be overwritten.

#include "prefix_lists/exportnet6.conf";

function is_self_net_v6() {
	return net ~ OWNNET_V6;
}

function is_announce_net_v6() {
	return net ~ EXPORTNET6;
}

protocol static {
	route ::/0 blackhole;
	route 2a0e:46c6::/40 blackhole {
		bgp_large_community.add((OWNAS, 1, 1));
#		bgp_large_community.add((6695, 103, 0)); # prepend 3x DE-CIX
#bgp_community.add((34549, 8840)); # do not announce at DE-CIX NYC
	};
# Don't pollute routing table, this is for experiments
#route 2a0e:b107:d0::/44 blackhole {
#	bgp_large_community.add((OWNAS, 1, 1));
#		bgp_large_community.add((6695, 103, 0)); # prepend 3x DE-CIX
#	bgp_community.add((34549, 8840)); # do not announce at DE-CIX NYC
#};
	ipv6 {
		import all;
		export none;
	};
}

define BOGON_PREFIXES_V6 = [
	::/8+,                         # RFC 4291 IPv4-compatible, loopback, et al 
	0100::/64+,                    # RFC 6666 Discard-Only
	2001:2::/48+,                  # RFC 5180 BMWG
	2001:10::/28+,                 # RFC 4843 ORCHID
	2001:db8::/32+,                # RFC 3849 documentation
	2002::/16+,                    # RFC 7526 6to4 anycast relay
	3ffe::/16+,                    # RFC 3701 old 6bone
	fc00::/7+,                     # RFC 4193 unique local unicast
	fe80::/10+,                    # RFC 4291 link local unicast
	fec0::/10+,                    # RFC 3879 old site local unicast
	ff00::/8+                      # RFC 4291 multicast
];

function reject_bogon_prefixes_v6()
	prefix set bogon_prefixes;
{
	bogon_prefixes = BOGON_PREFIXES_V6;
	if ( net ~ bogon_prefixes ) then {
#print "Reject: Bogon prefix: ", net, " ", bgp_path;
		reject;
	}
}

function reject_small_prefixes_v6()
{
	if (net.len > 48) then {
#print "Reject: Too small prefix: ", net, " ", bgp_path;
		reject;
	}
}

function reject_default_route_v6()
{
	if (net.len = 0) then {
		if (bgp_path.last != OWNAS) then print "Reject: Default route: ", net, "", bgp_path;
		reject;
	}
}

function minimum_filter_v6()
{
	reject_bogon_as_nums();
	reject_bogon_prefixes_v6();
	reject_small_prefixes_v6();
	reject_default_route_v6();
	reject_long_aspaths();
}
function import_filter_v6(string relation; int as_num) {
	if relation != "downstream" then {
		bgp_large_community.delete([(OWNAS, *, *)]);
	} else {
		bgp_large_community.delete([(OWNAS, 1, *)]);
	}
	minimum_filter_v6();
	if relation = "downstream" then {
		bgp_large_community.add((OWNAS, 1, 2));
		bgp_large_community.add((OWNAS, 329, 209844));
		bgp_local_pref = 300;
	}
	if relation = "peer"       then {
		bgp_large_community.add((OWNAS, 1, 3));
		bgp_local_pref = 200;
	}
	if relation = "upstream"   then {
		bgp_large_community.add((OWNAS, 1, 4));
		bgp_local_pref = 200;
# Deutsche Glasfaser Ã¼berlasteter DE-CIX / AMS-IX Port meiden
		if bgp_path ~ [= * 174 60294 =] then {
			bgp_local_pref = 220;
		}
		if bgp_path ~ [= * 1299 60294 =] then {
			bgp_local_pref = 220;
		}
		if bgp_path ~ [= * 3356 60294 =] then {
			bgp_local_pref = 220;
		}
	}
	if relation = "rs" then {
		bgp_large_community.add((OWNAS, 1, 3));
		bgp_large_community.add((OWNAS, 1, 5));
		bgp_local_pref = 200;
	}
	if relation = "ris" then {
		bgp_large_community.add((OWNAS, 1, 2));
		bgp_large_community.add((OWNAS, 1, 6));
		bgp_local_pref = 300;
	}
# Hurricane Electric => Deutsche Glaser
	if bgp_path ~ [= * 6939 60294 =] then {
		bgp_local_pref = 220;
	}
	if bgp_path ~ [= 58299 6939 =]  then {
		bgp_local_pref = 80;
	}
	if bgp_path ~ [= * 58299 13030 * =] then {
		bgp_local_pref = 80;
	}
	if bgp_path ~ [= 58299 15623 =]  then {
		bgp_local_pref = 80;
	}
	if bgp_community ~ [(34549, 10700)] then {
		bgp_local_pref = 80;
	}

	if !is_self_net_v6() then {
		accept;
	}
	reject;
}

function export_filter_v6(string relation; int as_num)
int prepends;
{
	prepends = 0;
	minimum_filter_v6();
	if !check_community_export(relation) then reject;
	if (!is_announce_net_v6() && relation != "downstream" && relation != "ris") then {
		print "WARNING: ROUTE NOT FILTERED BY COMMUNITY ", net, " ", bgp_path;
		reject;
	}

#if as_num ~ [34854, 58299] then prepends = 1;
#if as_num ~ [49697, 205927, 34927, 39533, 6939] then prepends = 1;

	if ((OWNAS, 309, 0) ~ bgp_large_community) then prepends = 9;
	if relation = "upstream" then {
		if ((OWNAS, 320, 0) ~ bgp_large_community) then prepends = 0;
		if ((OWNAS, 321, 0) ~ bgp_large_community) then prepends = 1;
		if ((OWNAS, 322, 0) ~ bgp_large_community) then prepends = 2;
		if ((OWNAS, 323, 0) ~ bgp_large_community) then prepends = 3;
		if ((OWNAS, 329, 0) ~ bgp_large_community) then prepends = 9;
		bgp_community.add((50629,30300)); # LWLCom: Do not announce to Core Backbone
	}
	if relation = "upstream" || relation = "peer" then {
		if ((OWNAS, 310, 0) ~ bgp_large_community) then prepends = 0;
		if ((OWNAS, 311, 0) ~ bgp_large_community) then prepends = 1;
		if ((OWNAS, 312, 0) ~ bgp_large_community) then prepends = 2;
		if ((OWNAS, 313, 0) ~ bgp_large_community) then prepends = 3;
		if ((OWNAS, 319, 0) ~ bgp_large_community) then prepends = 9;
	}

	if ((OWNAS, 100, as_num) ~ bgp_large_community) then prepends = 0;
	if ((OWNAS, 101, as_num) ~ bgp_large_community) then prepends = 1;
	if ((OWNAS, 102, as_num) ~ bgp_large_community) then prepends = 2;
	if ((OWNAS, 103, as_num) ~ bgp_large_community) then prepends = 3;
	if ((OWNAS, 109, as_num) ~ bgp_large_community) then prepends = 9;

	if prepends = 9 then {
		if relation != "downstream" then print "DO NOT EXPORT ", net, " TO ", as_num, ", ", bgp_path;
		reject;
	}
	if prepends = 1 then {
		bgp_path.prepend(OWNAS);
	}
	if prepends = 2 then {
		bgp_path.prepend(OWNAS);
		bgp_path.prepend(OWNAS);
	}
	if prepends = 3 then {
		bgp_path.prepend(OWNAS);
		bgp_path.prepend(OWNAS);
		bgp_path.prepend(OWNAS);
	}

	if relation != "downstream" then {
		bgp_large_community.delete([(OWNAS, *, *)]);
	}

	accept;
}

filter ospf_filter {
	if net = ::/0 then accept;
	if net ~ 2a0e:46c6::/47 then accept;
	else reject;
}

template bgp peer_template_v6 {
	local as OWNAS;
	path metric 1;
	ipv6 {
		import keep filtered;
		import limit 10 action block;
	};
}

#protocol ospf ospf1 {
#	export filter ospf_filter;
#	import filter ospf_filter;
#	area 0.0.0.0 {
#		interface "lo" {
#			stub;
#		};
#
#		interface "wg-r*" {
#		};
#	};
#}


protocol bgp upstream_ifog_ifog_v6 from peer_template_v6 {
	local 2a0c:9a40:1::609 as 207968;
	neighbor 2a0c:9a40:1::1 as 34927;
	ipv6 {
		import where import_filter_v6("upstream", 34927);
		export where export_filter_v6("upstream", 34927);
		import limit 130000 action block;
	};
}
protocol bgp peer_kleyrex_rs01_v6 from peer_template_v6 {
	local 2001:7f8:33::a120:7968:1 as 207968;
	neighbor 2001:7f8:33::a103:1142:1 as 31142;
	ipv6 {
		import where import_filter_v6("peer", 31142);
		export where export_filter_v6("peer", 31142);
		import limit 130000 action disable;
	};
}
protocol bgp peer_kleyrex_rs02_v6 from peer_template_v6 {
	local 2001:7f8:33::a120:7968:1 as 207968;
	neighbor 2001:7f8:33::a103:1142:2 as 31142;
	ipv6 {
		import where import_filter_v6("peer", 31142);
		export where export_filter_v6("peer", 31142);
		import limit 130000 action disable;
	};
}
protocol bgp peer_kleyrex_rs03_v6 from peer_template_v6 {
	local 2001:7f8:33::a120:7968:1 as 207968;
	neighbor 2001:7f8:33::a103:1142:3 as 31142;
	ipv6 {
		import where import_filter_v6("peer", 31142);
		export where export_filter_v6("peer", 31142);
		import limit 130000 action disable;
	};
}
protocol bgp peer_kleyrex_cloudflare_v6 from peer_template_v6 {
	local 2001:7f8:33::a120:7968:1 as 207968;
	neighbor 2001:7f8:33::a101:3335:1 as 13335;
	ipv6 {
		import where import_filter_v6("peer", 13335);
		export where export_filter_v6("peer", 13335);
		import limit 50000 action disable;
	};
}
protocol bgp upstream_kleyrex_hurricane_v6 from peer_template_v6 {
	local 2001:7f8:33::a120:7968:1 as 207968;
	neighbor 2001:7f8:33::a100:6939:1 as 6939;
	ipv6 {
		import where import_filter_v6("upstream", 6939);
		export where export_filter_v6("upstream", 6939);
		import limit 130000 action block;
	};
}
protocol bgp peer_kleyrex_tds_v6 from peer_template_v6 {
	local 2001:7f8:33::a120:7968:1 as 207968;
	neighbor 2001:7f8:33::a120:4345:1 as 204345;
	ipv6 {
		import where import_filter_v6("peer", 204345);
		export where export_filter_v6("peer", 204345);
		import limit 10 action disable;
	};
}
protocol bgp peer_kleyrex_fastethernet_v6 from peer_template_v6 {
	local 2001:7f8:33::a120:7968:1 as 207968;
	neighbor 2001:7f8:33::a120:6479:1 as 206479;
	ipv6 {
		import where import_filter_v6("peer", 206479);
		export where export_filter_v6("peer", 206479);
		import limit 50 action disable;
	};
}
protocol bgp peer_locix_rs00_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1::babe:1 as 202409;
	ipv6 {
		import where import_filter_v6("peer", 202409);
		export where export_filter_v6("peer", 202409);
		import limit 130000 action disable;
	};
}
protocol bgp peer_locix_rs02_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1::dead:1 as 202409;
	ipv6 {
		import where import_filter_v6("peer", 202409);
		export where export_filter_v6("peer", 202409);
		import limit 130000 action disable;
	};
}
protocol bgp peer_locix_rs03_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1::be5a as 202409;
	ipv6 {
		import where import_filter_v6("peer", 202409);
		export where export_filter_v6("peer", 202409);
		import limit 130000 action disable;
	};
}
protocol bgp peer_locix_as112_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1::112 as 112;
	ipv6 {
		import where import_filter_v6("peer", 112);
		export where export_filter_v6("peer", 112);
		import limit 10 action disable;
	};
}
protocol bgp peer_locix_fastethernet_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1:0:a105:6479:1 as 206479;
	ipv6 {
		import where import_filter_v6("peer", 206479);
		export where export_filter_v6("peer", 206479);
		import limit 50 action disable;
	};
}
protocol bgp upstream_locix_ifog_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1:0:a120:4927:1 as 34927;
	ipv6 {
		import where import_filter_v6("upstream", 34927);
		export where export_filter_v6("upstream", 34927);
		import limit 130000 action block;
	};
}
protocol bgp upstream_locix_meerfarbig_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1:0:a120:4549:1 as 34549;
	ipv6 {
		import where import_filter_v6("upstream", 34549);
		export where export_filter_v6("upstream", 34549);
		import limit 200000 action block;
	};
}
protocol bgp downstream_locix_q_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1:0:20:7960:1 as 207960;
	ipv6 {
		import where import_filter_v6("downstream", 207960);
		export where export_filter_v6("downstream", 207960);
		import limit 20 action disable;
	};
}
protocol bgp downstream_locix_linuxgemini_v6 from peer_template_v6 {
	local 2001:7f8:f2:e1:0:a120:7968:1 as 207968;
	neighbor 2001:7f8:f2:e1:0:20:8563:1 as 208563;
	ipv6 {
		import where import_filter_v6("downstream", 208563);
		export where export_filter_v6("downstream", 208563);
		import limit 10 action disable;
	};
}
#protocol bgp downstream_wireguard_feuerrot_feuerrot_v6 from peer_template_v6 {
#	local 2a0e:46c6:0:2::1 as 207968;
#	neighbor 2a0e:46c6:0:2::2 as 206506;
#	ipv6 {
#		import where import_filter_v6("downstream", 206506);
#		export where export_filter_v6("downstream", 206506);
#		import limit 10 action disable;
#	};
#}
## router specific extra config
protocol bgp ris_ripe_v6 from peer_template_v6 {
	neighbor 2001:67c:2e8:2:ffff:0:4:28 as 12654;
	multihop 255;
	ipv6 {
		import none;
		export where export_filter_v6("ris", 12654);
	};
}
