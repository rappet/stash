# This file is managed by Ansible. Changes will be overwritten.

#include "prefix_lists/exportnet4.conf";

function is_self_net_v4() {
	return net ~ OWNNET_V4;
}

function is_announce_net_v4() {
	return net ~ EXPORTNET4;
}

protocol static {
	route 0.0.0.0/0 blackhole;
	route 0.0.0.0/0 blackhole {
		bgp_large_community.add((OWNAS, 1, 1));

		bgp_large_community.add((207968, 100, 34549)); # Announce to Meerfarbig
			bgp_community.add((34549, 8000)); # Telia
# bgp_community.add((34549, 8100)); # DTAG
			bgp_community.add((34549, 8200)); # GTT
# bgp_community.add((34549, 8300)); # Orange
			bgp_community.add((34549, 8400)); # DE-CIX
			bgp_community.add((34549, 8500)); # Hurricane
			bgp_community.add((34549, 8890)); # AMS-IX
			bgp_community.add((65010, 1299)); # DTAG Telia
			bgp_community.add((65010, 3356)); # DTAG Level3

			bgp_large_community.add((207968, 329, 0)); # Not Announce to All
# bgp_large_community.add((207968, 100, 39533)); # Announce to Asympto
			bgp_large_community.add((207968, 100, 34854)); # Announce to Merkel Digital
# bgp_large_community.add((207968, 100, 58299)); # Announce to OpenFactory
# bgp_large_community.add((207968, 100, 56381)); # Announce to VPS66
			bgp_large_community.add((207968, 100, 34927)); # Announce to Fognet
			bgp_community.add((34549, 8840)); # do not announce at DE-CIX NYC
			bgp_community.add((50629,30300)); # LWLCom: Do not announce to Core Backbone
	};
	ipv4 {
		import all;
		export none;
	};
}

define BOGON_PREFIXES_V4 = [
	0.0.0.0/8+,         # RFC 1122 'this' network
	10.0.0.0/8+,        # RFC 1918 private space
	100.64.0.0/10+,     # RFC 6598 Carrier grade nat space
	127.0.0.0/8+,       # RFC 1122 localhost
	169.254.0.0/16+,    # RFC 3927 link local
	172.16.0.0/12+,     # RFC 1918 private space 
	192.0.2.0/24+,      # RFC 5737 TEST-NET-1
	192.88.99.0/24+,    # RFC 7526 6to4 anycast relay
	192.168.0.0/16+,    # RFC 1918 private space
	198.18.0.0/15+,     # RFC 2544 benchmarking
	198.51.100.0/24+,   # RFC 5737 TEST-NET-2
	203.0.113.0/24+,    # RFC 5737 TEST-NET-3
	224.0.0.0/4+,       # multicast
	240.0.0.0/4+     # reserved
];

function reject_bogon_prefixes_v4()
	prefix set bogon_prefixes;
{
	bogon_prefixes = BOGON_PREFIXES_V4;
	if ( net ~ bogon_prefixes ) then {
		print "Reject: Bogon prefix: ", net, " ", bgp_path;
		reject;
	}
}

function reject_small_prefixes_v4()
{
	if (net.len > 24) then {
# print "Reject: Too small prefix: ", net, " ", bgp_path;
		reject;
	}
}

function reject_default_route_v4()
{
	if (net.len = 0) then {
		if (bgp_path.last != OWNAS) then print "Reject: Default route: ", net, "", bgp_path;
		reject;
	}
}


function minimum_filter_v4()
{
	reject_bogon_as_nums();
	reject_bogon_prefixes_v4();
	reject_small_prefixes_v4();
	reject_default_route_v4();
	reject_long_aspaths();
}
function import_filter_v4(string relation; int as_num) {
	if relation != "downstream" then {
		bgp_large_community.delete([(OWNAS, *, *)]);
	} else {
		bgp_large_community.delete([(OWNAS, 1, *)]);
	}
	minimum_filter_v4();
	if relation = "downstream" then {
		bgp_large_community.add((OWNAS, 1, 2));
		bgp_community.add((174, 3150)); # Do not announce to TATA
			bgp_community.add((1299, 2630)); # Telia do not announce to TATA in Europe
			bgp_community.add((1299, 5630)); # Telia do not announce to TATA in North America
#bgp_community.add((34549, 8001)); # Meerfarbig prepend to Telia
			bgp_community.add((65010, 6453)); # DTAG do not announce to TATA
			bgp_local_pref = 300;
	}
	if relation = "peer" then {
		bgp_large_community.add((OWNAS, 1, 3));
		bgp_local_pref = 200;
	}
	if relation = "upstream" then {
		bgp_large_community.add((OWNAS, 1, 4));
		bgp_local_pref = 100;
# Marek
		if bgp_path ~ [= * 206499 * =] then {
			bgp_local_pref = 70;
		}
		if bgp_community ~ [(34549, 10700)] then {
			bgp_local_pref = 80;
		}
		if bgp_path ~ [= * 3320 * =] then {
			bgp_local_pref = 90;
		}
		if bgp_path ~ [= 34549 3320 * =] then {
			bgp_local_pref = 100;
		}
# Use other upstream for GTT. There are allready to many routes to Meerfarbig
		if bgp_path ~ [= * 34549 3257 * =] then {
			bgp_local_pref = 80;
		}

# Deutsche Glasfaser Ã¼berlasteter DE-CIX / AMS-IX Port meiden
		if bgp_path ~ [= * 174 60294 =] then {
			bgp_local_pref = 220;
		}
		if bgp_path ~ [= * 1299 60294 =] then {
			bgp_local_pref = 220;
		}
		if bgp_path ~ [= * 3356 60294 =] then {
			bgp_local_pref = 220;
		}
	}
	if relation = "rs" then {
		bgp_large_community.add((OWNAS, 1, 3));
		bgp_large_community.add((OWNAS, 1, 5));
		bgp_local_pref = 200;
	}
	if relation = "ris" then {
		bgp_large_community.add((OWNAS, 1, 2));
		bgp_large_community.add((OWNAS, 1, 6));
		bgp_local_pref = 300;
	}

	if (OWNAS, 300, 300) ~ bgp_large_community then bgp_local_pref = 300;
	if (OWNAS, 300, 250) ~ bgp_large_community then bgp_local_pref = 250;
	if (OWNAS, 300, 200) ~ bgp_large_community then bgp_local_pref = 200;
	if (OWNAS, 300, 150) ~ bgp_large_community then bgp_local_pref = 150;
	if (OWNAS, 300, 100) ~ bgp_large_community then bgp_local_pref = 100;
	if (OWNAS, 300, 50) ~ bgp_large_community then bgp_local_pref = 50;

	if !is_self_net_v4() then {
		accept;
	}
	reject;
}

function check_community_export(string relation) {
	if ((OWNAS, 1, 1) ~ bgp_large_community) then return true;
	if ((OWNAS, 1, 2) ~ bgp_large_community) then return true;
	if relation = "downstream" then {
		if ((OWNAS, 1, 3) ~ bgp_large_community) then return true;
		if ((OWNAS, 1, 4) ~ bgp_large_community) then return true;
	}
	return false;
}

function export_filter_v4(string relation; int as_num)
int prepends;
{
	# No IPv4 forwarding
	reject;


	prepends = 0;
	minimum_filter_v4();
	if !check_community_export(relation) then reject;
	if (!is_announce_net_v4() && relation != "downstream" && relation != "ris") then {
		print "WARNING: ROUTE NOT FILTERED BY COMMUNITY ", net, " ", bgp_path;
		reject;
	}

# if as_num ~ [34854, 58299] then prepends = 1;

	if ((OWNAS, 309, 0) ~ bgp_large_community) then prepends = 9;
	if relation = "upstream" then {
		if ((OWNAS, 320, 0) ~ bgp_large_community) then prepends = 0;
		if ((OWNAS, 321, 0) ~ bgp_large_community) then prepends = 1;
		if ((OWNAS, 322, 0) ~ bgp_large_community) then prepends = 2;
		if ((OWNAS, 323, 0) ~ bgp_large_community) then prepends = 3;
		if ((OWNAS, 329, 0) ~ bgp_large_community) then prepends = 9;
		bgp_community.add((50629,30300)); # LWLCom: Do not announce to Core Backbone
	}
	if relation = "upstream" || relation = "peer" then {
		if ((OWNAS, 310, 0) ~ bgp_large_community) then prepends = 0;
		if ((OWNAS, 311, 0) ~ bgp_large_community) then prepends = 1;
		if ((OWNAS, 312, 0) ~ bgp_large_community) then prepends = 2;
		if ((OWNAS, 313, 0) ~ bgp_large_community) then prepends = 3;
		if ((OWNAS, 319, 0) ~ bgp_large_community) then prepends = 9;
	}

	if ((OWNAS, 100, as_num) ~ bgp_large_community) then prepends = 0;
	if ((OWNAS, 101, as_num) ~ bgp_large_community) then prepends = 1;
	if ((OWNAS, 102, as_num) ~ bgp_large_community) then prepends = 2;
	if ((OWNAS, 103, as_num) ~ bgp_large_community) then prepends = 3;
	if ((OWNAS, 109, as_num) ~ bgp_large_community) then prepends = 9;

	if prepends = 9 then {
		if relation != "downstream" then print "DO NOT EXPORT ", net, " TO ", as_num, ", ", bgp_path;
		reject;
	}
	if prepends = 1 then {
		bgp_path.prepend(OWNAS);
	}
	if prepends = 2 then {
		bgp_path.prepend(OWNAS);
		bgp_path.prepend(OWNAS);
	}
	if prepends = 3 then {
		bgp_path.prepend(OWNAS);
		bgp_path.prepend(OWNAS);
		bgp_path.prepend(OWNAS);
	}

	if relation != "downstream" then {
		bgp_large_community.delete([(OWNAS, *, *)]);
	}

	accept;
}

template bgp peer_template_v4 {
	local as OWNAS;
	path metric 1;
	ipv4 {
		import keep filtered;
		import limit 10 action block;
	};
}


protocol bgp upstream_ifog_ifog_v4 from peer_template_v4 {
	local 193.148.249.188 as 207968;
	neighbor 193.148.249.1 as 34927;
	ipv4 {
		next hop self;
		import where import_filter_v4("upstream", 34927);
		export where export_filter_v4("upstream", 34927);
		import limit 1000000 action block;
	};
}
protocol bgp peer_kleyrex_rs01_v4 from peer_template_v4 {
	local 193.189.82.213 as 207968;
	neighbor 193.189.82.251 as 31142;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 31142);
		export where export_filter_v4("peer", 31142);
		import limit 700000 action disable;
	};
}
protocol bgp peer_kleyrex_rs02_v4 from peer_template_v4 {
	local 193.189.82.213 as 207968;
	neighbor 193.189.82.252 as 31142;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 31142);
		export where export_filter_v4("peer", 31142);
		import limit 700000 action disable;
	};
}
protocol bgp peer_kleyrex_rs03_v4 from peer_template_v4 {
	local 193.189.82.213 as 207968;
	neighbor 193.189.82.253 as 31142;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 31142);
		export where export_filter_v4("peer", 31142);
		import limit 700000 action disable;
	};
}
protocol bgp peer_kleyrex_hurricane_v4 from peer_template_v4 {
	local 193.189.82.213 as 207968;
	neighbor 193.189.82.134 as 6939;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 6939);
		export where export_filter_v4("peer", 6939);
		import limit 215000 action disable;
	};
}
protocol bgp peer_kleyrex_fastethernet_v4 from peer_template_v4 {
	local 193.189.82.213 as 207968;
	neighbor 193.189.82.203 as 206479;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 206479);
		export where export_filter_v4("peer", 206479);
		import limit 10 action disable;
	};
}
protocol bgp peer_locix_rs01_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.100 as 202409;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 202409);
		export where export_filter_v4("peer", 202409);
		import limit 130000 action disable;
	};
}
protocol bgp peer_locix_rs02_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.200 as 202409;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 202409);
		export where export_filter_v4("peer", 202409);
		import limit 130000 action disable;
	};
}
protocol bgp peer_locix_rs03_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.254 as 202409;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 202409);
		export where export_filter_v4("peer", 202409);
		import limit 130000 action disable;
	};
}
protocol bgp peer_locix_as112_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.112 as 112;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 112);
		export where export_filter_v4("peer", 112);
		import limit 10 action disable;
	};
}
protocol bgp peer_locix_fastethernet_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.25 as 206479;
	ipv4 {
		next hop self;
		import where import_filter_v4("peer", 206479);
		export where export_filter_v4("peer", 206479);
		import limit 10 action disable;
	};
}

protocol bgp upstream_locix_ifog_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.134 as 34927;
	ipv4 {
		next hop self;
		import where import_filter_v4("upstream", 34927);
		export where export_filter_v4("upstream", 34927);
		import limit 1000000 action block;
	};
}
protocol bgp upstream_locix_meerfarbig_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.40 as 34549;
	ipv4 {
		next hop self;
		import where import_filter_v4("upstream", 34549);
		export where export_filter_v4("upstream", 34549);
		import limit 2000000 action block;
	};
}
protocol bgp downstream_locix_q_v4 from peer_template_v4 {
	local 185.1.166.140 as 207968;
	neighbor 185.1.166.240 as 207960;
	ipv4 {
		next hop self;
		import where import_filter_v4("downstream", 207960);
		export where export_filter_v4("downstream", 207960);
		import limit 10 action disable;
	};
}
